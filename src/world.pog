

// struct QuadTreeNode {
//     QuadTreeNode* q1, q2, q3, q4;
//     Entity* e;
// }

// QuadTreeNode* insert(QuadTreeNode* node, vec2 pos, float32 size, Entity* e) {
//     if node == null  node = alloc QuadTreeNode;
//     if node.e {
//     }
//     node.e = e;
// }




// Arena* arean_entities = arena_create();
// uint32 entities_count = 0;
// Entity* spawn() {
//     Entity* en = arena_alloc(arean_entities, sizeof Entity);

//     entities_count++;
//     return en;
// }

// removes dead entities and defragments arena while retaining correct parent pointer for dead/relocated parent entities
// void cleanup_entities() {
//     Entity* entities = arean_entities as uint64 + sizeof(Arena);

//     for 0 .. entities_count {
//         let en = *entities[it];
//         if en.parent and is_dead(en.parent) en.parent = null;
//     }

//     for 0 .. entities_count {
//         let en = *entities[it];
//         if is_dead(en) {
//             let last_en = *entities[entities_count-1];
//             @en = @last_en;
//             @(last_en as uint32*) = it;
//             entities_count--;
//             it--;
//         }
//     }

//     for 0 .. entities_count {
//         let en = *entities[it];
//         if en.parent {
//             if en.parent as uint64 >= *entities[entities_count] as uint64 {
//                 en.parent = *entities[@(en.parent as uint32*)];
//             }
//         }
//     }

// }



struct EntityPool {
    Entity* data;
    uint32 count;
}

EntityPool init_pool() {
    return {
        data = vmem_reserve(0xFFFF_FFFF)
    };
}

Entity* entity_new(EntityPool* pool) {
    for 0 .. pool.count {
        let en = *pool.data[it];
        // TODO: error: Cannot infer implicit dereferencing ".ready_for_reuse".
        // we should be able to use implicit dereferencing here
        if en.entity_type == EntityType.ready_for_reuse  return en;
    }

    // TODO: should vmem_commit be wrapped in a condition for performance?
    vmem_commit(pool.data, ++pool.count * sizeof Entity);
    return *pool.data[pool.count-1];
}

void cleanup_pool(EntityPool* pool) {
    for 0 .. pool.count {
        let en = *pool.data[it];
        if en.parent and is_dead(en.parent) en.parent = null;
        if en.target and is_dead(en.target) en.target = null;

        if is_dead(en) {
            if en.cargo {
                free(en.cargo);
                en.cargo = null;
            }
            en.entity_type = .ready_for_reuse;
        }
    }

    uint32 i = pool.count;
    while i {
        let en = *pool.data[--i];
        if is_dead(en)  pool.count--;
        else break;
    }
}


const do_enemy_spawn = true;
const linear_drag = 0.99;

EntityPool entity_pool = init_pool();
Entity* player;
uint32 player_money = 0;

const team_id_asteroids = 0;
const team_id_player = 1;

Bullet* bullets = list_create(sizeof Bullet);

Transform2D camera = {0,0, 0, 10};

struct SpaceshipType {
    char* name;
    vec2[] thrusters;
    vec2[] turret_mount;

    uint32 sprite_index;
    Sprite sprite;

    uint32 cargo_capacity;
}

SpaceshipType[] spaceship_types = {
    { name = "og",          thrusters = {}, sprite_index = 4, cargo_capacity = 40 },
    { name = "small_cargo", thrusters = {}, sprite_index = 5, cargo_capacity = 60 },
    { name = "small_moth",  thrusters = {}, sprite_index = 6, cargo_capacity = 40 },
    { name = "new",         thrusters = {}, sprite_index = 7, cargo_capacity = 50 },
    { name = "large_agile", thrusters = {}, sprite_index = 8, cargo_capacity = 35 },
    { name = "idunno",      thrusters = {}, sprite_index = 10, cargo_capacity = 70 },
    { name = "moth",        thrusters = {}, sprite_index = 11, cargo_capacity = 120 },
    { name = "big",         thrusters = {}, sprite_index = 12, cargo_capacity = 150 },
    { name = "cool",        thrusters = {}, sprite_index = 13, cargo_capacity = 55 }
};

enum EntityType {
    none; // default no behaviour
    ready_for_reuse; // dead entities will be marked ready for reuse
    ship; turret;
    station; asteroid;
    item;
    missile;
    debris;
    shockwave;
}

struct Entity {
    Entity* parent;
    Entity* target;

    Chunk* chunk;

    EntityType entity_type;
    Agent_Behaviour behaviour;
    vec2 target_pos;

    with Transform2D tr;
    float32 depth;

    Sprite sprite;
    vec4 color_factor;
    vec4 color_additive;

    vec2 vel;
    float32 ang_vel;
    float32 mass;
    float32 collider_radius;

    uint32 level;
    float32 hp, max_hp;
    uint32 team_id;
    float32 cooldown;

    uint32 cargo_capacity;
    Cargo* cargo;
    Item item;
}

struct Bullet {
    Entity* emitter;
    vec2 pos;
    vec2 vel;
    float32 life_time;
    uint32 team_id;
}

void spawn_bullet(vec2 pos, vec2 vel, uint32 team_id) {
    Bullet p = {};
    p.pos = pos;
    p.vel = vel;
    p.team_id = team_id;
    list_add(*bullets, *p);
}


bool is_dead(Entity* e) { return e.hp <= 0; }

void despawn(Entity* en) {
    en.hp = 0;
}

// initializes entity data with sensible defaults, some based on sprite
Entity* spawn_entity(vec2 pos, Sprite sprite) {
    let en = entity_new(*entity_pool);
    @en = {};
    en.tr.pos = pos;
    en.tr.scale = 1;
    en.sprite = sprite;
    en.color_factor = vec4_one;

    let size = get_sprite_pixel_size(sprite);
    en.collider_radius = min(size.x, size.y) * en.tr.scale / 2;

    en.max_hp = max((size.x + size.y) / 20, 1);
    en.hp = en.max_hp;
    en.mass = size.x * size.y;
    return en;
}

Entity* spawn_ship(vec2 pos, uint32 ship_type, team_id) {
    let sst = spaceship_types[ship_type];

    let en = spawn_entity(pos, sst.sprite);
    en.entity_type = .ship;

    en.max_hp *= 6;
    en.hp = en.max_hp;
    en.team_id = team_id;

    en.tr.rot = random(global_seed++) * Pi;
    en.cargo_capacity = sst.cargo_capacity;
    // TODO: this should work: ({.Rock, 10} as Item)
    add_item(en, {ItemKind.Rock, (random01() * en.cargo_capacity/2) as uint32} as Item);

    if ship_type == 5 {
        let turret = spawn_entity(vec2_zero, sprite_turret);
        turret.entity_type = .turret;
        turret.parent = en;
        turret.team_id = en.team_id;
        turret.depth = -0.01;
    }

    return en;
}

Entity* spawn_player() {
    let en = spawn_ship(vec2_zero, 0, team_id_player);
    return en;
}

Entity* spawn_enemy(vec2 pos) {
    static uint32 ships_index = 0;
    static uint32 team_id = 3;

    let en = spawn_ship(pos, ships_index++ % spaceship_types.length, team_id++);
    return en;
}

Entity* spawn_asteroid(vec2 pos, uint32 asteroid_index) {

    let sprite = sprites_asteroids[asteroid_index];
    let en = spawn_entity(pos, sprite);
    en.entity_type = .asteroid;
    en.level = asteroid_index;

    en.tr.rot = random(global_seed++) * Pi;
    en.team_id = team_id_asteroids;
    en.depth = 0.01;

    return en;
}

Entity* spawn_item(vec2 pos, ItemKind item_kind, uint32 count) return spawn_item(pos, { item_kind, count } as Item);
Entity* spawn_item(vec2 pos, Item item) {
    let en = spawn_entity(pos, sprites_items[item.kind]);
    en.entity_type = .item;
    en.item = item;
    return en;
}

Entity* spawn_missile(Entity* launcher) {
    let en = spawn_entity(launcher.tr.pos, sprites_items[0]);
    en.entity_type = .missile;
    en.tr.rot = launcher.tr.rot;
    en.team_id = launcher.team_id;
    en.cooldown = 7;
    en.vel = launcher.vel;
    en.target = launcher.target;
    return en;
}

Entity* spawn_shockwave(vec2 pos) {
    let en = spawn_entity(pos, sprite_shockwave);
    en.entity_type = .shockwave;
    en.tr.scale = 0;
    en.cooldown = 1;
    en.depth = 0.005;
    return en;
}


void accelerate(Entity* e, vec2 acc) {
    e.vel = add(e.vel, mul(acc, deltatime()));
}

void apply_impulse(Entity* en, vec2 impulse) {
    en.vel = en.vel + impulse / en.mass;
}

// note: |dir.x| <= 1 and |dir.y| <= 1
void thrust(Entity* e, vec2 dir) {
    if dir.x == 0.0 and dir.y == 0.0 return;

    const non_forward_factor = 0.7;
    dir.x *= non_forward_factor;
    if dir.y < 0  dir.y *= non_forward_factor;
    dir = rotate_vec(dir, e.tr.rot);

    let dt = deltatime();

    let force = dir * e.mass * 80; // * 80_000; // N
    let imp = force * dt;     // Ns

    // TODO: hack!
    if e.entity_type == EntityType.missile  imp = imp * 2;

    apply_impulse(e, imp);


    {
        let sprite_size = get_sprite_pixel_size(e.sprite);
        vec2 offset = {0, -sprite_size.y / 2};
        vec2 particle_pos = local2world(e.tr, offset);

        vec2    p_vel = e.vel - dir * 8000 * dt + random_vec2(20);
        float32 size = random_range(0.5, 1);
        float32 rot = random(global_seed++) * Pi;
        float32 ang_vel = 1;
        float32 life_time = random_range(0.1, 0.6);
        uint32  flags = ParticleFlag_SubEmitter;

        let p = make_particle(particle_pos, p_vel, size, rot, ang_vel, life_time, color_fire, flags);
        p.color_end = color_smoke;
        p.color_end.w = 0;
        spawn_particle(p);
    }
}

void turn_to(Entity* e, vec2 target) {
    let diff = sub(target, e.tr.pos);
    diff = rotate_vec(diff, -e.tr.rot);
    float32 angle = vec2_to_angle(diff);

    e.ang_vel = angle * 3;
}

void fire_gun(Entity* e) {
    const bullet_muzzle_speed = 800;
    const bullet_random_muzzle_speed = 48;

    if e.cooldown <= 0 {
        let dir = up(e.tr);
        dir.x *= -1;

        Bullet bullet = {};
        bullet.emitter = e;
        bullet.pos = e.tr.pos + dir * e.collider_radius;
        bullet.vel = e.vel + dir * bullet_muzzle_speed + random_vec2(bullet_random_muzzle_speed);
        bullet.team_id = e.team_id;
        list_add(*bullets, *bullet);

        e.cooldown = 0.25;

        uint32 num_p = 10;
        for 0 .. num_p {

            vec2    p_vel = e.vel + (dir*40 + random_vec2(20)) * random01();
            float32 size = 0.5;
            float32 rot = random(global_seed++) * Pi;
            float32 ang_vel = 1;
            float32 life_time = 1;
            vec4    color = color_to_vec4(rgba(0xFF6A00FF));

            let p = make_particle(bullet.pos, p_vel, size, rot, ang_vel, life_time, color, 0);
            spawn_particle(p);
        }
    }
}

void on_destroy(Entity* en) {

    if en.cargo  drop_cargo(en, 0);

    switch en.entity_type {
        case .ship: {
            spawn_explosion((en.collider_radius * 5) as uint32, en.tr.pos, en.vel, 112);

            for 0 .. debris_count {
                let debris = spawn_entity(en.tr.pos, en.sprite);
                debris.entity_type = .debris;
                debris.level = it;

                let t = (it as float32 + 0.5) / debris_count * Tau;
                let vel = rotate_vec(make_vec(cosf(t), sinf(t)), en.tr.rot);
                debris.vel = en.vel + vel * random01(global_seed++)*20;
                debris.ang_vel = random(global_seed++) * 0.6;
                debris.tr.rot = en.tr.rot;
            }
        } break;

        case .turret: {
            spawn_explosion((en.collider_radius * 5) as uint32, en.tr.pos, en.vel, 112);
        } break;

        case .station: {
            spawn_explosion((en.collider_radius * 5) as uint32, en.tr.pos, en.vel, 112);
        } break;

        case .asteroid: {
            if en.level {
                for 0 .. 2 {
                    let a = spawn_asteroid(en.tr.pos, en.level - 1);
                    a.vel = a.vel + en.vel + random_unit_vec2() * 50;
                    a.ang_vel = random(global_seed++) * Pi;
                }
            } else {
                let drop_count = random_range(global_seed++, 0, 7) as uint32;
                for 0 .. drop_count {
                    let a = spawn_item(en.tr.pos, ItemKind.Rock, 1);
                    a.vel = a.vel + en.vel + random_unit_vec2() * 50;
                    a.ang_vel = random(global_seed++) * Pi;
                }

                // spawn_explosion((en.collider_radius * 5) as uint32, en.tr.pos, en.vel, 112);
            }

            for 0 .. (en.collider_radius * 10) as uint32 {
                vec2 pos = en.tr.pos + random_vec2(en.collider_radius);
                float32 size = 1 + random01() * 1;
                float32 max_vel_magnitude = 50;
                spawn_disipating_dust_particle(pos, size, max_vel_magnitude, color_dust);
            }


        } break;

        case .item: {
        } break;

        case .missile: {
            spawn_explosion((en.collider_radius * 10) as uint32, en.tr.pos, en.vel, 150);
        } break;
    }
}

void update_entity(Entity* en) {
    let dt = deltatime();
    en.tr.pos = en.tr.pos + en.vel * dt;
    en.tr.rot += en.ang_vel * dt;
    en.vel = en.vel * linear_drag;
    en.ang_vel *= 0.99;

    float32 hp_regen_rate = 0.2; // hp/s
    en.hp = clamp(en.hp + hp_regen_rate*dt, 0, en.max_hp);

    if en.cooldown > 0  en.cooldown -= dt;
    if en.parent  en.tr.pos = local2world(en.parent.tr, vec2_zero);

    switch (en.entity_type) {

        case .ship: {
            if en != player {
                update_ai(en);
            }
        } break;

        case .item: {
            let pickers = closest_entities(en, en.collider_radius);
            for 0 .. pickers.length {
                let picker = pickers[it];
                if picker.entity_type == EntityType.ship
                or picker.entity_type == EntityType.station {
                    if picker == en.target and en.cooldown > 0 continue;

                    pickup(picker, en);
                    break;
                }
            }
        } break;

        case .turret: {
            if en.parent and en.parent.target {
                turn_to(en, en.parent.target.tr.pos);
                fire_gun(en);
            }
        } break;

        case .missile: {

            if en.target {
                turn_to(en, en.target.tr.pos);
            } else {
                let closest = closest_entity(en, EntityType.ship);
                if closest.team_id != en.team_id  en.target = closest;
            }

            thrust(en, vec2_unit_y);

            let inter_en = first_intersecting_entity(en, EntityType.ship);
            if inter_en and inter_en.team_id != en.team_id {
                inter_en.hp -= 10;
                en.hp = 0;
            }

            if en.cooldown <= 0  en.hp = 0;
        } break;

        case .shockwave: {
            en.tr.scale += 2 * dt;
            en.color_factor.w = clamp(en.cooldown, 0, 1);
            if en.cooldown <= 0 en.hp = 0;

            let ens = closest_entities(en, en.collider_radius * en.tr.scale);
            for 0 .. ens.length {
                let e = ens[it];
                e.color_additive = { 1, 1, 1, 0 } * 0.1;

                vec2 force = normalize_or(e.tr.pos - en.tr.pos, vec2_one) * 4000 * e.collider_radius*2;

                apply_impulse(e, force*dt);
            }
        } break;

        default: break;
    }

    if en.entity_type != EntityType.shockwave {
        for 0 .. list_length(bullets) {
            let bullet = bullets[it];
            if bullet.team_id == en.team_id continue;

            float32 intersection = circle_dist(en.tr.pos, en.collider_radius, bullet.pos, 0.3);
            if intersection < 0 {
                if en.target == null
                or en.target.entity_type == EntityType.asteroid
                    en.target = bullet.emitter;

                if player and bullet.emitter == player  player.target = en;

                // en.color_additive = {1, 1, 1, 0};
                en.color_additive = color_to_vec4(rgba(0xFF6A00FF));
                en.hp--;
                apply_impulse(en, bullet.vel);

                for 0 .. 10 {
                    vec2    pos = bullet.pos;
                    vec2    vel = random_vec2(15);
                    float32 size = 0.4;
                    float32 rot = random(global_seed++) * Pi;
                    float32 ang_vel = 1;
                    float32 life_time = 1;
                    vec4    color = color_to_vec4(rgba(0xFF6A00FF));

                    Particle p = make_particle(pos, vel, size, rot, ang_vel, life_time, color, 0);
                    spawn_particle(p);
                }

                list_unordered_remove(bullets, it-- as uint32);

                if en == player  this_frame.player_took_damage = true;
                if is_dead(en) break;
            }
        }
    }

    DrawBuffers db = en.entity_type == EntityType.debris ? db_debris[en.level] : quad_db;
    draw_sprite(db, en.tr, en.depth, en.sprite, en.color_factor, en.color_additive);

    en.color_additive = exp_decay(en.color_additive, vec4_zero, 10, dt);

    if is_dead(en) on_destroy(en);
}

float32 circle_dist(vec2 p0, float32 r0, vec2 p1, float32 r1) {
    let len = length(sub(p0, p1));
    let r = r0 + r1;
    return len - r;
}

float32 circle_dist(Entity* e0, e1) return circle_dist(e0.tr.pos, e0.collider_radius, e1.tr.pos, e1.collider_radius);
float32 entity_intersects(Entity* e0, e1) return circle_dist(e0, e1) < 0;

Entity* query_entity(vec2 pos) {
    for 0 .. entity_pool.count {
        let e = *entity_pool.data[it];
        if !is_dead(e) and circle_dist(pos, 0, e.tr.pos, e.collider_radius) < 0   return e;
    }

    return null;
}

Entity* closest_entity(Entity* self, EntityType et) {
    float32 min_sqdist = 99999999;
    Entity* result = null;

    for 0 .. entity_pool.count {
        let en = *entity_pool.data[it];
        if en == self or is_dead(en) or en.entity_type != et  continue;

        float32 sqd = sqdist(self.tr.pos, en.tr.pos);
        if sqd < min_sqdist {
            result = en;
            min_sqdist = sqd;
        }
    }

    return result;
}

Entity*[] closest_entities(vec2 pos, float32 radius) return closest_entities(pos, null, radius);
Entity*[] closest_entities(Entity* self, float32 radius) return closest_entities(self.tr.pos, self, radius);
Entity*[] closest_entities(vec2 pos, Entity* self, float32 radius) {

    static Entity*[..] list = list_create(sizeof Entity*);
    list_clear(list);

    for 0 .. entity_pool.count {
        let en = *entity_pool.data[it];
        if en == self or is_dead(en) continue;
        // if sqdist(pos, en.tr.pos) < radius*radius   list_add(*list, *en);
        if circle_dist(pos, radius, en.tr.pos, en.collider_radius*en.tr.scale) < 0   list_add(*list, *en);
    }

    Entity*[] result = {}; // TODO: Entity[..] should implicitly convert to Entity[]
    result.data = list;
    result.length = list_length(list);
    return result;
}

Entity* first_intersecting_entity(Entity* self, EntityType et) {
    for 0 .. entity_pool.count {
        let en = *entity_pool.data[it];
        if en == self or is_dead(en) or en.entity_type != et  continue;

        if entity_intersects(self, en) return en;
    }

    return null;
}

void update_world() {
    let dt = deltatime();

    if player and is_dead(player)   player = null;

    if key_pressed(GLFW_KEY_SPACE)  player = null;

    { // camera controlls:
        static vec2 target_cam_pos = {};
        static float32 target_cam_zoom = 160;

        const cam_min_zoom = 160;
        const cam_max_zoom = 6000;

        target_cam_zoom = clamp(target_cam_zoom - target_cam_zoom*0.1*Input.mouse_scroll, cam_min_zoom, cam_max_zoom);
        float32 target_cam_scale = target_cam_zoom;

        if player {
            target_cam_pos = player.tr.pos;
            target_cam_scale += length(player.vel) / 7;
        } else {
            target_cam_pos = target_cam_pos + Input.wasd * target_cam_zoom / 100;
        }

        camera.pos = exp_decay(camera.pos, target_cam_pos, 4, dt);
        camera.scale = exp_decay(camera.scale, target_cam_scale, 5, dt);
    }

    vec2 mouse_world_pos = get_mouse_world_coord(camera);
    // apply_camera(camera);


    if player {
        thrust(player, Input.wasd);
        turn_to(player, mouse_world_pos);
        if mouse(Left_Mouse) fire_gun(player);
        if mouse_pressed(Right_Mouse) {
            spawn_missile(player);
        }

        if key_pressed('Q') drop_cargo(player, 5);

        // const font_size = 0.1;
        // vec2 pos = {-1, 1 - font_size / 2};
        // pos = draw_text(pos, font_size, to_string(player.hp as uint64), White);
        // pos = draw_text(pos, font_size, " / ", White);
        // pos = draw_text(pos, font_size, to_string(player_max_hp), White);
    } else {
        // player = spawn_player();

        void line(char* text, float32 line_num) {
            string str = make_string(text);
            const text_size = 0.03;
            vec2 pos = {0, -0.4};
            pos.x -= str.length * text_size / 4;
            pos.y -= text_size * line_num;
            draw_text(pos, text_size, str, Gray);
        }

        line("Right Mouse Click to spawn ship", 0);
        line("Hold Shift and Left Mouse Click to take control of the ship", 1.5);

    }


    if mouse_pressed(Right_Mouse) {
        let e = spawn_enemy(mouse_world_pos);
        // let e = spawn_shockwave(mouse_world_pos);
        // let vel = mul(make_vec((mouse_x - pmouse_x) as float32, -(mouse_y - pmouse_y) as float32), 0.01);

        // spawn_explosion(64, mouse_world_pos, vec2_zero, 7*16.0);

        // spawn_item(mouse_world_pos, { ItemKind.Rock, 3 } as Item);
    }

    if mouse_pressed(Left_Mouse) and key(GLFW_KEY_LEFT_SHIFT) {
        let en = query_entity(mouse_world_pos);
        if en and en.entity_type == EntityType.ship {
            player = en;
            player.team_id = team_id_player;
        }
    }

    draw_background(camera.pos);

    sort_entities_into_chunks();

    for 0 .. entity_pool.count {
        let e = *entity_pool.data[it];
        if is_dead(e) continue;
        update_entity(e);
    }

    bind(projectile);
    for 0 .. list_length(bullets) {
        let bullet = *bullets[it];
        if bullet.emitter and is_dead(bullet.emitter) bullet.emitter = null;

        Transform2D tr = { bullet.pos, vec2_to_angle(bullet.vel), 1 };
        draw_sprite(tr, 0, sprite_projectile, vec4_one, vec4_zero);

        vec2 pos_start = bullet.pos;
        vec2 pos_end   = bullet.pos + bullet.vel * dt;

        uint32 num_p = 10;
        for 0 .. num_p {
            float32 t = it as float32 / num_p;

            vec2    pos = lerp(t, pos_start, pos_end);
            vec2    vel = random_vec2(10);
            float32 size = 0.7;
            float32 rot = random(global_seed++) * Pi;
            float32 ang_vel = 1;
            float32 life_time = 0.15 + dt*t;
            vec4    color = color_to_vec4(rgba(0xFF6A00FF));

            Particle p = make_particle(pos, vel, size, rot, ang_vel, life_time, color, 0);
            spawn_particle(p);
        }

        bullet.pos = pos_end;
        bullet.life_time += dt;

        if bullet.life_time > 0.7 {
            list_unordered_remove(bullets, it as uint32);
            it--;
            continue;
        }
    }


    cleanup_pool(*entity_pool);

    update_particles();
}

void draw_background(vec2 center) {
    const s = 10;
    const spacing = 160;
    for x : -s .. s+1 for y : -s .. s+1 {
        ivec2 p_seed = make_ivec(round2multiple(center, spacing));
        p_seed.x += x * spacing; p_seed.y += y * spacing;

        int32 seed = p_seed.x + p_seed.y * 100;

        float32 depth = map(random(seed++), -1, 1, 0.3, 1.0);
        Transform2D tr = {};
        tr.pos = add(make_vec(p_seed), mul(make_vec(random(seed++), random(seed++)), spacing / 2.0));
        tr.rot = random(seed++) * Pi;
        tr.scale = 1.0;

        Sprite sprite;
        if random(seed++) < 0 {
            sprite = sprite_cloud;
        } else {
            sprite = sprites_asteroids[(random01(seed++) * sprites_asteroids_count) as uint32];
        }
        draw_sprite(tr, depth, sprite);
    }
}

const chunk_size = 800;
const chunk_count_sqrt = 5;
const chunk_count = chunk_count_sqrt*chunk_count_sqrt;
Chunk[chunk_count] chunks = {};

struct Chunk {
    ivec2 coord;
    Entity*[..] entities;
}

ivec2 get_chunk_coord(vec2 pos) {
    return make_ivec(round2multiple(pos, chunk_size) / chunk_size);
}

void init_chunks() {
    for 0 .. chunk_count {
        chunks[it].coord = {999, 999};
        chunks[it].entities = list_create(sizeof Entity*);
    }
}

Chunk* get_chunk_with_coord(ivec2 coord) {
    for 0 .. chunk_count {
        if equals(chunks[it].coord, coord) {
            return *chunks[it];
        }
    }
    return null;
}

void sort_entities_into_chunks() {

    static ivec2 prev_center = {};
    ivec2 center = get_chunk_coord(camera.pos);

    if !equals(prev_center, center) {

        prev_center = center;
    }


    Chunk*[..] recyclable = list_create(sizeof Chunk*);
    ivec2[..] coords = list_create(sizeof ivec2);

    const half = chunk_count_sqrt/2;

    // get all valid coordinates that lack a chunk
    for y: -half .. half+1 {
        for x: -half .. half+1 {
            ivec2 rel = {x, y};
            ivec2 coord = center + rel;

            let chunk = get_chunk_with_coord(coord);
            if chunk == null  list_add(*coords, *coord);
        }
    }

    // get all chunks with invalid coordinates
    for 0 .. chunk_count {
        let chunk = *chunks[it];
        ivec2 rel = chunk.coord - center;
        if rel.x < -half or rel.y < -half
        or rel.x >  half or rel.y >  half {
            list_add(*recyclable, *chunk);
        }
    }

    uint32 len = list_length(coords);
    if len == list_length(recyclable) {
        for 0 .. len {
            spawn_chunk(recyclable[it], coords[it]);
        }
    } else {
        uint32 rec_len = list_length(recyclable);
        print("[ERROR]: HOW DID THIS HAPPEN!? len(coords) = ", len, " len(recyclable) = ", rec_len, "\n");
    }


    list_delete(recyclable);
    list_delete(coords);

    Chunk*[chunk_count] chunks_sorted = {};
    for y: -half .. half+1 {
        for x: -half .. half+1 {
            ivec2 rel = {x, y};
            ivec2 coord = center + rel;

            ivec2 i = rel + make_ivec2(chunk_count_sqrt/2);
            let chunk = get_chunk_with_coord(coord);
            chunks_sorted[i.y * chunk_count_sqrt + i.x] = chunk;
            list_clear(chunk.entities);
        }
    }


    for 0 .. entity_pool.count {
        let en = *entity_pool.data[it];
        ivec2 coord = get_chunk_coord(en.tr.pos);
        en.chunk = get_chunk_with_coord(coord);
        if en.chunk {
            list_add(*en.chunk.entities, *en);
        } else despawn(en);
    }
}

void spawn_chunk(Chunk* chunk, ivec2 coord) {
    chunk.coord = coord;

    int32 seed = (coord.x & 0x0000FFFF) |
                ((coord.y << 16) & 0xFFFF0000);

    // print("spawn chunk ", coord, " with seed: ", seed, "\n");

    const half = chunk_size / 2;
    vec2 chunk_pos = make_vec(coord) * chunk_size;// - { half, half };


    if random(seed++) < 0 {
        vec2 pos = chunk_pos + { random(seed++), random(seed++) } * half;
        let ss = spawn_entity(pos, sprite_spacestation);
        ss.entity_type = .station;
        ss.depth = 0.1;
        ss.tr.rot = random(seed++) * Pi;
        ss.cargo_capacity = 100_000;
    }


    // init interactable asteroids
    for 0 .. chunk_size*chunk_size / 30_000 {

        uint32 asteroid_index = (random01(seed++) * sprites_asteroids_count) as uint32;
        vec2 pos = chunk_pos + { random(seed++), random(seed++) } * half;
        let en = spawn_asteroid(pos, asteroid_index);
        en.tr.rot = random(seed++) * Pi;
        en.depth = 0.01;
    }


    if do_enemy_spawn and random(global_seed++) < 0 {
        vec2 pos = chunk_pos + { random(seed++), random(seed++) } * half;
        spawn_enemy(pos);
    }
}