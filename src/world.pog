

// struct QuadTreeNode {
//     QuadTreeNode* q1, q2, q3, q4;
//     Entity* e;
// }

// QuadTreeNode* insert(QuadTreeNode* node, vec2 pos, float32 size, Entity* e) {
//     if node == null  node = alloc QuadTreeNode;
//     if node.e {
//     }
//     node.e = e;
// }



const do_enemy_spawn = false;
const linear_drag = 0.99;

// TODO: definitely should use arena for entity pools so we dont have to worry about reference invalidation due to list resize
Entity* global_entity_pool = list_create(sizeof Entity);
Entity* get_player() { return *global_entity_pool[0]; }

const player_max_hp = 200;

Bullet* bullets = list_create(sizeof Bullet);

Transform2D camera = {0,0, 0, 10};


struct Entity {
    void(Entity*) behaviour;

    with Transform2D tr;
    float32 depth;

    Sprite sprite;

    vec2 vel;
    float32 ang_vel;

    uint32 hp;
    uint32 team_id;
    float32 gun_recharge;
    float32 collider_radius;
}

// struct Asteroid {

// }

struct Bullet {
    vec2 pos;
    vec2 vel;
    uint32 team_id;
}

void spawn_bullet(vec2 pos, vec2 vel, uint32 team_id) {
    Bullet p = {pos, vel, team_id};
    list_add(*bullets, *p);
}


void kill_entity(Entity* e) { e.hp = 0; }
bool entity_is_dead(Entity e) { return e.hp == 0; }

Entity* spawn_entity(Entity** pool, vec2 pos, Sprite sprite) {
    Entity* e = list_append(pool);

    @e = {};
    e.tr.pos = pos;
    e.tr.rot = 0;
    e.tr.scale = 1.0;
    e.depth = 0;
    e.hp = 8;
    e.sprite = sprite;

    let size = get_boundingbox_size(get_sprite_boundingbox(sprite));
    e.collider_radius = min(size.x, size.y) * e.tr.scale / 2;

    return e;
}



void accelerate(Entity* e, vec2 acc) {
    e.vel = add(e.vel, mul(acc, deltatime()));
}

// note: |dir.x| <= 1 and |dir.y| <= 1
void thrust(Entity* e, vec2 dir) {
    if dir.x == 0.0 and dir.y == 0.0 return;

    const non_forward_factor = 0.5;
    dir.x *= non_forward_factor;
    if dir.y < 0  dir.y *= non_forward_factor;

    dir = mul(dir, 5*16);

    let acc = rotate_vec(dir, e.tr.rot);
    accelerate(e, acc);

    let sprite_size = get_sprite_size(e.sprite);
    vec2 offset = {0, -sprite_size.y / 2};
    // vec2 offset = {25, -46};
    vec2 particle_pos = local2world(e.tr, offset);

    // TODO: neg(acc) is not scaled by deltatime?
    spawn_particle(particle_pos, add(e.vel, neg(acc)), 0.5, 1, 0.5, 2.0);
}

void turn_to(Entity* e, vec2 target) {
    let diff = sub(target, e.tr.pos);
    diff = rotate_vec(diff, -e.tr.rot);
    float32 angle = vec2_to_angle(diff);

    e.ang_vel = angle * 3;
}

void fire_gun(Entity* e) {
    if e.gun_recharge <= 0 {
        let disp = up(e.tr);
        disp.x *= -1;

        let vel = add(mul(disp, 50*16), e.vel);
        vel = add(vel, random_vec2(3*16));
        spawn_bullet(add(e.tr.pos, disp), vel, e.team_id);
        e.gun_recharge = 0.25;
    }
}

Entity* spawn_enemy(vec2 pos) {
    static uint32 ships_index = 0;

    let e = spawn_entity(*global_entity_pool, pos, spaceship_types[ships_index++ % spaceship_types.length].sprite);
    e.tr.rot = random(global_seed++) * Pi;
    e.team_id = 1;
    e.behaviour = update_ai;
    return e;
}

void update_entity(Entity* e) {
    e.tr.pos = add(e.tr.pos, mul(e.vel, deltatime()));
    e.tr.rot += e.ang_vel * deltatime();
    e.vel = mul(e.vel, linear_drag);
    // e.ang_vel *= 0.99;

    e.gun_recharge -= deltatime();

    vec4 color = vec4_one;

    for 0 .. list_length(bullets) {
        let bullet = bullets[it];
        if bullet.team_id == e.team_id continue;

        float32 intersection = circle_intersects(e.tr.pos, e.collider_radius, bullet.pos, 0.3);
        if intersection < 0 {
            color = {100, 100, 100, 100};
            e.hp--;
            e.vel = add(e.vel, mul(bullet.vel, 0.004));
            list_unordered_remove(bullets, it as uint32);
            it--;

            if e.hp == 0 {
                spawn_explosion((e.collider_radius * 5) as uint32, e.tr.pos, e.vel, 7*16);
                break;
            }
        }
    }

    draw_sprite(e.tr, e.depth, e.sprite, color);

    if e.behaviour  e.behaviour(e);
}

void update_ai(Entity* e) {

    turn_to(e, get_player().tr.pos);
    let dist = length(sub(e.tr.pos, get_player().tr.pos));

    if dist < 15*16  fire_gun(e);

    let t = dist - 5*16;
    t = t / abs(t);
    thrust(e, { 0, t } as vec2);
}

float32 circle_intersects(vec2 p0, float32 r0, vec2 p1, float32 r1) {
    let len = length(sub(p0, p1));
    let r = r0 + r1;
    return len - r;
}


void update_world() {

    draw_background(camera.pos);

    {
        ivec2 chunk_coord = get_chunk_coord(get_player().tr.pos);

        ivec2[] chunk_coord_offsets = { {0, 0}, {1, 0}, {0, 1}, {1, 1} };
        Chunk*[] chunks = {*chunk_1, *chunk_2, *chunk_3, *chunk_4};
        int32 coord_index = 0;
        ivec2[] coords = {{},{},{},{}};

        for it : 0 .. 4 {
            ivec2 coord = add(chunk_coord, chunk_coord_offsets[it]);

            if      equals(coord, chunk_1.coord) { chunks[0] = null; continue; }
            else if equals(coord, chunk_2.coord) { chunks[1] = null; continue; }
            else if equals(coord, chunk_3.coord) { chunks[2] = null; continue; }
            else if equals(coord, chunk_4.coord) { chunks[3] = null; continue; }
            else {
                coords[coord_index++] = coord;
            }
        }

        coord_index = 0;
        for 0 .. chunks.length {
            if chunks[it] == null  continue;

            spawn_chunk(chunks[it], coords[coord_index++]);
        }
    }



    void update_entity_list(Entity* ens) {
        for 0 .. list_length(ens) {
            let e = *ens[it];
            if entity_is_dead(@e) continue;
            update_entity(e);
        }
    }

    update_entity_list(global_entity_pool);
    update_entity_list(chunk_1.entities);
    update_entity_list(chunk_2.entities);
    update_entity_list(chunk_3.entities);
    update_entity_list(chunk_4.entities);


    bind(projectile);
    for 0 .. list_length(bullets) {
        let bullet = *bullets[it];

        const despawn_radius = 400;
        if sqdist(get_player().tr.pos, bullet.pos) > (despawn_radius*despawn_radius) {
            list_unordered_remove(bullets, it as uint32);
            it--;
            continue;
        }

        Transform2D tr = { bullet.pos, vec2_to_angle(bullet.vel), 0.1 };
        apply_transform(tr);

        vec2 particle_scale = {4, 16}; // TODO: hard coded dimentions here
        apply_entity_scale(particle_scale);
        apply_uv(vec2_zero, vec2_one);
        draw_elements(quad_db);

        // draw_texture(tr, 0.0, projectile, vec4_one);

        bullet.pos = add(bullet.pos, mul(bullet.vel, deltatime()));
    }


    static uint32 prev_bullets_count = 0;
    uint32 bullets_count = list_length(bullets);
    if bullets_count != prev_bullets_count {
        // print("Bullets: ", bullets_count, "\n");
        prev_bullets_count = bullets_count;
    }


    update_particles();

}

void draw_background(vec2 center) {
    const s = 10;
    const spacing = 160;
    for x : -s .. s+1 for y : -s .. s+1 {
        ivec2 p_seed = make_ivec(round2multiple(center, spacing));
        p_seed.x += x * spacing; p_seed.y += y * spacing;

        int32 seed = p_seed.x + p_seed.y * 100;

        float32 depth = map(random(seed++), -1, 1, 0.3, 1.0);
        Transform2D tr = {};
        tr.pos = add(make_vec(p_seed), mul(make_vec(random(seed++), random(seed++)), spacing / 2.0));
        tr.rot = random(seed++) * Pi;
        tr.scale = 1.0;

        draw_sprite(tr, depth, sprite_asteroid_medium, vec4_one);
    }
}

const chunk_size = 1600;

Chunk chunk_1 = init_chunk();
Chunk chunk_2 = init_chunk();
Chunk chunk_3 = init_chunk();
Chunk chunk_4 = init_chunk();


struct Chunk {
    ivec2 coord;
    Entity* entities;
}

ivec2 get_chunk_coord(vec2 pos) {
    return make_ivec(mul(round2multiple(pos, chunk_size), 1.0 / chunk_size));
}

Chunk init_chunk() {
    Chunk s = {};
    s.coord = {999, 999}; // NOTE: this is to fix bug where chunk 0,0 wont generate at game start
    s.entities = list_create(sizeof Entity);
    return s;
}

void spawn_chunk(Chunk* chunk, ivec2 coord) {
    chunk.coord = coord;
    list_clear(chunk.entities);

    int32 seed = (coord.x & 0x0000FFFF) |
                ((coord.y << 16) & 0xFFFF0000);

    print("spawn chunk ", coord, " with seed: ", seed, "\n");

    const half = chunk_size / 2;
    vec2 chunk_pos = make_vec(sub(mul(coord, chunk_size), { half, half } as ivec2));


    // init interactable asteroids
    for 0 .. chunk_size*chunk_size / 10_000{
        vec2 pos = { random(seed++) * half, random(seed++) * half };
        let e = spawn_entity(*chunk.entities, add(pos, chunk_pos), sprite_asteroid_medium);
        e.tr.rot = random(seed++) * Pi;
        e.team_id = 2;
        e.hp = 10;
        e.depth = 0.01;
    }


    if do_enemy_spawn and random(global_seed++) < 0 {
        vec2 pos = { random(seed++) * half, random(seed++) * half };
        spawn_enemy(add(pos, chunk_pos));
    }
}