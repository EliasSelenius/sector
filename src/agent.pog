
enum Agent_Behaviour {
    idle; assist; follow; attack; mine_asteroid;
}

void update_ai(Entity* en) {

    switch (en.behaviour) {

        case .idle: {

            if en.target {
                agent_attack(en, en.target);
            } else {
                let d = sqdist(en.target_pos, en.tr.pos);
                if d < 60*60 or d > chunk_size*chunk_size {
                    en.target_pos = en.tr.pos + {random(global_seed++), random(global_seed++)} * 600;
                }

                agent_goto(en, en.target_pos);
            }

        } break;

        case .assist: {

            if en.target == null {
                en.target = closest_entity(en, EntityType.ship);
            } else {
                if en.target.target and en.target.behaviour == Agent_Behaviour.attack {
                    agent_attack(en, en.target.target);
                } else {
                    agent_goto(en, en.target.tr.pos);
                }
            }

        } break;

        case .follow: {
            if player agent_goto(en, player.tr.pos);
        } break;

        case .attack: {
            if en.target == null {
                en.target = closest_entity(en, EntityType.ship);
            } else {
                agent_attack(en, en.target);
            }
        } break;

        case .mine_asteroid: {
        } break;
    }

}

void agent_goto(Entity* en, vec2 pos) {
    turn_to(en, pos);
    thrust(en, vec2_unit_y);
}

void agent_attack(Entity* en, target) {
    let dist = circle_dist(en, target);

    float32 seconds = dist / bullet_muzzle_speed;
    let target_pos = target.tr.pos + target.vel * seconds;

    turn_to(en, target_pos);
    // look_at(*en.tr, target_pos);

    if dist < 15*16  fire_gun(en);

    float32 min_dist = 80;
    float32 max_dist = 200;

    vec2 thrust_dir = {};

    if dist < min_dist {
        thrust_dir.y = -1;
    } else if dist > max_dist {
        thrust_dir.y = 1;
    } else {
        let denom = abs(target.vel.x);
        thrust_dir.x = denom == 0.0 ? 0.0 : -target.vel.x / denom;
    }

    thrust(en, thrust_dir);
}