
include "../grax/grax.pog";

include "src/world.pog";
include "src/particles.pog";
include "src/inventory.pog";
include "src/agent.pog";

// learn to tolerate boredom

// ..\plang\bin\plang.exe src\main.pog cflags -lglfw3dll -O3
// ..\plang\bin\plang.exe src\main.pog cflags -lglfw3dll -O0 -g -fsanitize=address -fno-omit-frame-pointer

/*
    Civilization is flourishing in an asteroid field of abundant riches, and yet conflict is prevalent
*/

/* TODOs:
    - dust particles floating in space
    - asteroid cluster distribution

    - smoke particle on damaged ships
    - electric particle effect on damaged ships

    - semi-transparent ice asteroids

    - sector level
    - sector map
    - sector unique background color
    - higher value ore drop in higher level sectors

    - ships drop data

    - research-tree: use data to unlock ship components
    - data used to unlock upgrades to ship components
        thrusters
        health (armor)
        shield
        shield_regen
        weapon
        tracktor beam
        projectile deflection chance

    tracktor beam upgrades:
        - radius
        - count

    - ship-outfitter: select a ship and components, build with money

    - explosive charges

Priority:
    - spacestation
    - drop cargo at spacestation -> cargo turns into money -> money buys bigger ships

    - improve AI
        - detection range
        - passive behaviour
            - pickup items
            - destroy asteroid
            - drop cargo at spacestation
            - follow behaviour fleet leader

        - aggressive when provoked
            - loose aggression

    - seperate rendering and game logic into different codepaths
        - render map


idea:
    only able to mine asteroids with a mining laser
    laser can be upgraded to be able to:
     - mine larger asteroids
     - more ore yield from asteroids
     - break asteroid faster
     - range



research audio implementations:
    - raylib source code
    - handmade hero?
        - direct sound
        - x audio
    - sokol audio

*/

vec2 get_mouse_world_coord(Transform2D cam_tr) {
    float32 x = mouse_x as float32 / app.window_width * 2 - 1;
    float32 y = -(mouse_y as float32 / app.window_height * 2 - 1);

    x *= app.width_over_height;

    return local2world(cam_tr, x, y);
}


const debris_count = 6;
DrawBuffers[debris_count] db_debris;


Spritesheet spritesheet;
Spritesheet spritesheet_items;

const sprites_asteroids_count = 3;
Sprite[3] sprites_asteroids;

Sprite[2] sprites_items;

Sprite sprite_turret;
Sprite sprite_spacestation;

Texture2D projectile;
Texture2D particle;

Sprite sprite_projectile;
Sprite sprite_particle;
Sprite sprite_shockwave;
Sprite sprite_cloud;
Sprite sprite_ftl_test;


// struct Assets {
//     Spritesheet spritesheet;
//     Spritesheet spritesheet_items;

//     Sprite[] sprites;

//     Sprite*[sprites_asteroids_count] asteroids;
//     Sprite*[] spaceships;
//     Sprite*[ItemKind_Count] items;
// }

void loadassets() {


    projectile = load_texture2D("assets/proj.bmp");
    particle   = load_texture2D("assets/particle.bmp");

    // set_filter(particle, TextureFilter.linear);
    // set_wrap_mode(particle, TextureWrapMode.clamp_to_edge);

    Sprite load_sprite(char* file) return make_sprite(load_texture2D(file));
    sprite_projectile = make_sprite(projectile);
    sprite_particle = make_sprite(particle);
    sprite_shockwave = load_sprite("assets/shockwave.bmp");
    sprite_cloud = load_sprite("assets/cloud.bmp");
    sprite_ftl_test = load_sprite("assets/ftl_test.bmp");

    // set_filter(sprite_cloud.tex, TextureFilter.linear);

    Spritesheet load_spritesheet(char* file_name) {
        let image = load_bitmap(file_name);
        Spritesheet sheet = {};
        sheet.regions = get_all_regions(image);

        // for 0 .. image.width * image.height {
        //     if equals(image.pixels[it], Black) {
        //         image.pixels[it] = {};
        //     }
        // }

        sheet.texture = create_texture2D(image);
        set_filter(sheet.texture, TextureFilter.nearest);


        free(image.pixels);
        return sheet;
    }

    spritesheet = load_spritesheet("assets/spritesheet.bmp");
    spritesheet_items = load_spritesheet("assets/Items.bmp");

    for 0 .. ship_types.length {
        ship_types[it].sprite = get_sprite(*spritesheet, ship_types[it].sprite_index);
    }

    ship_types[9].sprite = sprite_ftl_test;


    for 0 .. sprites_asteroids_count {
        sprites_asteroids[it] = get_sprite(*spritesheet, it);
    }

    for 0 .. ItemKind_Count {
        sprites_items[it] = get_sprite(*spritesheet_items, it);
    }

    sprite_turret = get_sprite(*spritesheet, 9);
    sprite_spacestation = get_sprite(*spritesheet, 15);

    sprite_projectile.is_semi_transparent = true;
    sprite_shockwave.is_semi_transparent = true;
    sprite_particle.is_semi_transparent = true;
    sprite_cloud.is_semi_transparent = true;
}

enum Game_View {
    World; Outfitter; Ship_Selection; Tech_Tree; Map;
}

Game_View game_view = .World;
Transform2D camera_to_dispatch;

void on_event(AppEvent event, AppEventData data) switch event {

}

void main() {

    // { // test
    //     void test(uint32 i) {
    //         let f = @(*i as float32*);
    //         print("float: ", f, " = ", f32_to_str(f), "\n");
    //     }

    //     test(0x7f80_0000);
    //     test(0x7f80_0001);
    //     test(0x7f80_0002);
    //     test(0x7f80_0003);
    //     test(0x7f80_0004);
    //     test(0x7f80_0005);
    //     test(0x7f80_0006);
    //     test(0x7f80_0007);
    //     test(0x7f80_0008);
    //     test(0x7f80_0009);
    //     test(0x7f80_000a);
    //     test(0x7f80_000b);
    //     test(0x7f80_000c);
    //     test(0x7f80_000d);
    //     test(0x7f80_000e);
    //     test(0x7f80_000f);

    //     test(0xffc0_0000);
    //     test(0x7fc0_0000);

    //     test(0xff_800001);
    //     test(0xff_800000);

    //     test(0x0000_0000);

    //     float32 div_by_zero = 12.0/0.0;
    //     test(@(*div_by_zero as uint32*));

    //     float32 sqrt_neg = sqrtf(-1);
    //     test(@(*sqrt_neg as uint32*));

    // } return;

    grax_init();
    app.on_event = on_event;
    init_draw2d();

    loadassets();

    for 0 .. debris_count {
        db_debris[it] = create_draw_buffers(sizeof vertex2D, vertex2D_attribs);

        vec2 clamp_to_square_edge(float32 x, y) {
            if abs(x) < abs(y) {
                y /= abs(y);
            } else {
                x /= abs(x);
            }

            return make_vec(x, y) * 0.5;
        }

        vertex2D[3] vs;
        vs[0] = {0, 0, 0.5, 0.5, White};

        let t = it as float32 / debris_count * Tau;
        vec2 p = clamp_to_square_edge(cos(t), sin(t));
        vs[1] = {p, p + vec2_one*0.5, White};

        t = (it+1) as float32 / debris_count * Tau;
        p = clamp_to_square_edge(cos(t), sin(t));
        vs[2] = {p, p + vec2_one*0.5, White};

        uint32[] inds = { 0, 1, 2 };
        vertex2D[] verts; // TODO: vertex2D[3] should implicitly convert to vertex2D[]
        verts.data = *vs;
        verts.length = 3;
        update_buffers(*db_debris[it], verts, inds);
    }

    for 0 .. debris_count {
        bind_instance_buffer_to_vao(db_debris[it].vao, draw2d_renderer.vbo_instances);
    }


    set_clear_color(rgba(0x0a0a0aff));

    init_chunks();

    while grax_loop() {

        static bool draw_list = false;
        if key_pressed(GLFW_KEY_F2) draw_list = !draw_list;
        if draw_list draw_entity_list();

        switch (game_view) {
            case .World: {
                update_world();
                draw_gui();
                draw_map();
                camera_to_dispatch = world_camera;
                if key_pressed(GLFW_KEY_ENTER) {
                    camera_to_dispatch = {};
                    camera_to_dispatch.scale = 200;
                    game_view = .Ship_Selection;
                }
            } break;

            case .Outfitter: {

            } break;

            case .Ship_Selection: {
                let st = ship_selection_menu();
                if st {
                    if player_money >= st.build_cost {
                        player_money -= st.build_cost;
                        game_view = .World;
                        player = spawn_ship(vec2_zero, st, team_id_player);
                    }
                }

                if key_pressed(GLFW_KEY_ENTER) game_view = .World;
            } break;

            case .Tech_Tree: break;

            case .Map: break;
        }

        if key_pressed('Y') {
            save_game();
        } else if key_pressed('U') {
            load_game();
        }

        dispatch_sprites(camera_to_dispatch);
        this_frame = {};

        if key_pressed(GLFW_KEY_ESCAPE) break;
    }
}

ThisFrameData this_frame;
struct ThisFrameData {
    bool player_pickup_item;
    bool player_took_damage;
}

SpaceshipType* ship_selection_menu() {
    SpaceshipType* result = null;

    if mouse(Right_Mouse) camera_to_dispatch.pos = camera_to_dispatch.pos - Input.mouse_delta * camera_to_dispatch.scale;
    ui_camera = camera_to_dispatch;
    vec2 mouse_world_pos = get_mouse_world_coord(camera_to_dispatch);

    float32 horz_pos = -1;
    for 0 .. ship_types.length {
        let st = *ship_types[it];

        float32 stride = st.sprite.uv_scale.x * st.sprite.tex.width;
        float32 height = st.sprite.uv_scale.y * st.sprite.tex.height;
        float32 start = horz_pos;

        Transform2D tr = {};
        tr.scale = 1;
        tr.pos = {horz_pos + stride/2, height/2};
        horz_pos += stride + 30;

        float32 glyph_height = 10;
        vec4 color = vec4_one;

        if is_unlocked(st) {
            vec2 size = { stride, height };
            vec2 bb_min = tr.pos - size/2;
            vec2 bb_max = tr.pos + size/2;

            if point_inside_bb(mouse_world_pos, bb_min, bb_max) {
                tr.scale = 1.1;
                if mouse_down(Left_Mouse) {
                    result = st;
                }
            }

            draw_text(tr.pos + make_vec(stride/2, height/2), glyph_height, to_string(st.hp as uint32), Red);
            draw_text(tr.pos + make_vec(stride/2, height/2 - glyph_height), glyph_height, to_string(st.cargo_capacity), Blue);

            draw_text(tr.pos + make_vec(-stride/2, height/2), glyph_height, to_string(st.build_cost), Cyan);
        } else {
            uint32 prct = (st.blueprints_acquired as float32 / st.blueprints_required * 100.0) as uint32;
            let text = make_string(concat(to_string(prct), "%"));
            draw_text(tr.pos - make_vec(5*(text.length-1 as float32)/2.0, 0), glyph_height, text, White);

            color = {0,0,0, 1};
        }

        draw_sprite(tr, 0, st.sprite, color, vec4_zero);

        draw_text(tr.pos + make_vec(-stride/2, -height/2), glyph_height, st.name, White);
    }

    return result;
}

void draw_map() {

    float32 scale = 0.1;
    let center_sector = get_sector_coord(world_camera.pos);
    vec2 center = {1.2, 0.7};
    for y: -1 .. 2 {
        for x: -1 .. 2 {
            let pos = world_camera.pos / sector_size;

            // TODO: compiler should be able to infere type in this case:
            // vec2 center_sector;
            // let sector_pos = center_sector + {x, y};

            vec2 sector_pos = center_sector + {x, y};
            uint32 sector_level = (abs(sector_pos.x) + abs(sector_pos.y)) as uint32;
            vec2 screen_pos = center + (sector_pos - pos) * scale;
            draw_rect(screen_pos, make_vec2(0.95) * scale, opacity(White, 0.8));
            draw_text(screen_pos, 0.40 * scale, to_string(sector_level), Black);
        }
    }

    draw_rect(center, make_vec2(0.1*scale), Red);

}

struct Gui_Bar {
    vec4 color;
    float32 height;

    vec4 target_color;
    float32 target_height;
}

void make_bar_jump(Gui_Bar* bar) {
    bar.color = vec4_one;
    bar.height = bar.target_height * 1.2;
}

Gui_Bar bar_player_capacity = {
    target_color = color_to_vec4(rgba(0x10_60_E0_F0)),
    target_height = 0.07
};

Gui_Bar bar_player_health = {
    target_color = color_to_vec4(rgba(0xFF_60_40_F0)),
    target_height = 0.07
};

void draw_bar(Gui_Bar* bar, vec2 pos, float32 width, value, max_value) {

    float32 progress = value / max_value;

    Color bar_bg  = rgba(0xAA_AA_AA_A0);

    vec2 size  = { width, bar.target_height };
    vec2 size2 = { width * progress, bar.height };

    string float_str(float32 v) return trim_end(trim_end(f32_to_str(v), '0'), '.');

    anchor = .bottom_left;
    draw_rect(pos, size, bar_bg);
    draw_rect(pos, size2, rgba(bar.color));
    vec2 new_pos = draw_text(pos, size.y, float_str(value), White);
    new_pos = draw_text(new_pos, size.y, " / ", White);
    new_pos = draw_text(new_pos, size.y, float_str(max_value), White);
    anchor = .center;

    let dt = deltatime();
    float32 rate = 10;
    bar.color = exp_decay(bar.color, bar.target_color, rate, dt);
    bar.height = exp_decay(bar.height, bar.target_height, rate, dt);
}

void draw_gui() {
    float32 height = 0.07;

    if this_frame.player_took_damage  make_bar_jump(*bar_player_health);
    if this_frame.player_pickup_item  make_bar_jump(*bar_player_capacity);

    if player {
        vec2 pos = app.bottom_left + make_vec(height, height);
        float32 width = 1;

        anchor = .bottom_left;
        draw_text(pos + make_vec(width + height/2, 0), height, to_string(player_money), Cyan);
        anchor = .center;

        draw_bar(*bar_player_capacity, pos, width, cargo_amount(player) as float32, player.cargo_capacity as float32);
        pos.y += height * 1.5;
        draw_bar(*bar_player_health, pos, width, player.hp, player.max_hp);

    }

    draw_text(make_vec(0, -1 + height), height, vec_to_str(get_sector_coord(world_camera.pos)), White);
}


// TODO: compiler rtti
char*[] entity_type_names = {
    "none",
    "ready_for_reuse",
    "ship",
    "turret",
    "station",
    "asteroid",
    "item",
    "missile",
    "debris",
    "shockwave",
    "blueprint"
};

char* entity_to_str(Entity* en) {
    return en ? entity_type_names[en.entity_type] : "null";
}

string f32_to_str(float32 f) return f32_to_str(temp_builder(), f);
string f32_to_str(StringBuilder* sb, float32 f) {

    uint32 bits = @(*f as uint32*);
    // print("float: ", f, " bits: ", bits, "\n");

    if bits&0x8000_0000  sb_append(sb, "-");

    if bits == 0x7f80_0000 or bits == 0xff80_0000 {
        sb_append(sb, "Infinity");
        return to_string(sb);
    }

    if is_nan(f) {
        sb_append(sb, "NaN");
        return to_string(sb);
    }

    sb_append(sb, to_string(abs(f) as uint64));
    sb_append(sb, ".");

    let frac = to_string(round(fract(abs(f)) * 1_000_000) as uint64);
    for 0 .. 6 - frac.length   sb_append(sb, '0');
    sb_append(sb, frac);

    return to_string(sb);
}

char* vec_to_str(vec2 v) return vec_to_str(temp_builder(), v);
char* vec_to_str(StringBuilder* sb, vec2 v) {
    f32_to_str(sb, v.x);
    sb_append(sb, ", ");
    f32_to_str(sb, v.y);
    return sb.content;
}

void draw_entity_properties_menu(Entity* en) {

    if en == null return;


    uint32 entity_id = (en as uint64 - entity_pool.data as uint64) / sizeof Entity;

    float32 text_height = 0.03;

    vec2 pos = {-1, 1 - text_height};

    // pos = (pos - world_camera.pos) / world_camera.scale;

    pos = draw_text(pos, text_height, concat("ID              : ", to_string(entity_id), "\n"), White);
    pos = draw_text(pos, text_height, concat("parent          : ", entity_to_str(en.parent), "\n"), White);
    pos = draw_text(pos, text_height, concat("target          : ", entity_to_str(en.target), "\n"), White);
    pos = draw_text(pos, text_height, concat("entity_type     : ", entity_to_str(en), "\n"), White);
    pos = draw_text(pos, text_height, concat("behaviour       : ", "", "\n"), White);
    pos = draw_text(pos, text_height, concat("target_pos      : ", vec_to_str(en.target_pos), "\n"), White);
    pos = draw_text(pos, text_height, concat("tr              : ", "", "\n"), White);
    pos = draw_text(pos, text_height, concat("  .pos          : ", vec_to_str(en.tr.pos), "\n"), White);

    // pos = draw_text(pos, text_height, concat("  .rot          : ", f32_to_str(en.tr.rot), "\n"), White);
    pos = draw_text(pos, text_height, "  .rot          : ", White);
    field_float(*en.tr.rot, pos, text_height);
    pos.y -= text_height;
    pos.x = -1;

    pos = draw_text(pos, text_height, concat("  .scale        : ", f32_to_str(en.tr.scale), "\n"), White);
    pos = draw_text(pos, text_height, concat("depth           : ", f32_to_str(en.depth), "\n"), White);
    pos = draw_text(pos, text_height, concat("sprite          : ", "", "\n"), White);
    pos = draw_text(pos, text_height, concat("color_factor    : ", "", "\n"), White);
    pos = draw_text(pos, text_height, concat("color_additive  : ", "", "\n"), White);
    pos = draw_text(pos, text_height, concat("vel             : ", vec_to_str(en.vel), "\n"), White);
    pos = draw_text(pos, text_height, concat("ang_vel         : ", f32_to_str(en.ang_vel), "\n"), White);
    pos = draw_text(pos, text_height, concat("mass            : ", f32_to_str(en.mass), "\n"), White);
    pos = draw_text(pos, text_height, concat("collider_radius : ", f32_to_str(en.collider_radius), "\n"), White);
    pos = draw_text(pos, text_height, concat("level           : ", to_string(en.level), "\n"), White);
    pos = draw_text(pos, text_height, concat("hp              : ", f32_to_str(en.hp), "\n"), White);
    pos = draw_text(pos, text_height, concat("max_hp          : ", f32_to_str(en.max_hp), "\n"), White);
    pos = draw_text(pos, text_height, concat("team_id         : ", to_string(en.level), "\n"), White);
    pos = draw_text(pos, text_height, concat("cooldown        : ", f32_to_str(en.cooldown), "\n"), White);
    pos = draw_text(pos, text_height, concat("cargo_capacity  : ", to_string(en.cargo_capacity), "\n"), White);
    pos = draw_text(pos, text_height, concat("cargo           : ", "", "\n"), White);
    pos = draw_text(pos, text_height, concat("item            : ", "", "\n"), White);

}

void draw_entity_list() {

    static float32 vert_pos = 0;
    static float32 vert_pos_target = 0;
    static Entity* selected_entity = null;

    float32 text_height = 0.03;


    int64 index = -1;
    if Input.mouse_pos.x < -1 {
        index = round((app.top_left.y + vert_pos - Input.mouse_pos.y - text_height) / text_height) as int64;
    }

    vert_pos = exp_decay(vert_pos, vert_pos_target, 10, deltatime());

    uint32 line_count = 0;
    vec2 pos = app.top_left + { text_height/2, -text_height + vert_pos };
    for 0 .. entity_pool.count {
        let en = *entity_pool.data[it];
        char* name = entity_type_names[en.entity_type];

        if en.entity_type == EntityType.asteroid {
            index++;
            continue;
        }

        Color color = White;
        if it == index {
            color = Blue;
            if mouse(Left_Mouse) {
                selected_entity = en;
                // player = en;
                // world_camera.pos = en.tr.pos;
            }
        }

        draw_text(pos, text_height, concat(to_string(it as uint64).chars, ". ", name), color);
        pos.y -= text_height;
        line_count++;
    }

    if Input.mouse_pos.x < -1 {
        vert_pos_target = clamp(vert_pos_target - Input.mouse_scroll/10, 0, line_count * text_height);
        Input.mouse_scroll = 0;
    }



    draw_entity_properties_menu(selected_entity);
    if selected_entity  selected_entity.color_additive = vec4_one;// * 2;

    { // test
        static float32 v = 12;
        field_float(*v, make_vec(0, 0), 0.05);
    }

}

void field_float(float32* value, vec2 pos, float32 height) {
    // anchor = .bottom_left;


    let text = f32_to_str(@value);
    vec2 size = make_vec(height/2 * text.length, height);

    vec2 v = (Input.mouse_pos - pos);
    if v.x < size.x and v.y < size.y and v.x > 0 and v.y > 0 {
        draw_rect(pos + make_vec(size.x/2 - height/4, 0), size, opacity(White, 0.3));

        @value += Input.mouse_scroll / (key_down(GLFW_KEY_LEFT_SHIFT) ? 10 : 1);
        Input.mouse_scroll = 0;
    }

    draw_text(pos, height, text, White);
    // anchor = .center;
}

    // widget_push();
    // background(image)
    // text("dawodjaw")
    // text()
    // if hover() {
    //     border(Red);
    // } else {
    //     border(Blue);
    // }
    // widget_pop();

// void slider(vec2 pos, size, float32* value) {
// }



struct Game_Save {
    uint32 player_money;
    vec2   player_pos;
    uint32 player_ship_type;

    Cargo player_cargo;

    uint32[Ship_Type_Count] blueprints;
}


void save_game() {
    Game_Save save = {};
    save.player_money = player_money;
    if player {
        save.player_pos = player.tr.pos;
        save.player_ship_type = 1 + (player.ship_type as uint64 - ship_types.data as uint64) / sizeof SpaceshipType;
        save.player_cargo = player.cargo ? @player.cargo : {};
    } else {
        save.player_pos = world_camera.pos;
    }

    for 0 .. ship_types.length {
        save.blueprints[it] = ship_types[it].blueprints_acquired;
    }

    write_binary_file("save.bin", *save, sizeof Game_Save);
}

void load_game() {
    let buffer = read_binary_file("save.bin");
    Game_Save* save = buffer.data;

    player_money = save.player_money;

    world_camera.pos = save.player_pos;
    if save.player_ship_type {
        player = spawn_ship(save.player_pos, save.player_ship_type - 1, team_id_player);
        @player.cargo = save.player_cargo;
    } else {
        player = null;
    }

    for 0 .. ship_types.length {
        (*ship_types[it]).blueprints_acquired = save.blueprints[it];
    }
}