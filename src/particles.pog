

struct Particle {
    vec2 pos;
    vec2 vel;
    float32 rot;
    float32 size;
    Texture2D tex;
    float32 life_time;
}


Particle* particles = list_create(sizeof Particle);
Particle* sub_particles = list_create(sizeof Particle);


void spawn_particle(vec2 pos, vec2 vel, Texture2D tex) {
    Particle p = {};
    p.pos = pos;
    p.vel = vel;
    p.rot = random(global_seed++) * Pi;
    p.tex = tex;
    p.life_time = random01() * 2.5;
    list_add(*particles, *p);
}

void spawn_explosion(uint32 size, vec2 pos, vel, float32 spread) {
    for 0 .. size {
        vec2 r = random_unit_vec2(spread);
        spawn_particle(pos, add(vel, r), particle);
    }
}

void draw_particles() {
    let dt = deltatime();
    let count = list_length(particles);
    for 0 .. count {
        let p = *particles[it];
        p.pos = add(p.pos, mul(p.vel, dt));
        p.vel = mul(p.vel, random_range(it, 0.96, 1)); // TODO: this is kinda dumb!
        p.life_time -= dt;

        const fire_color = {1, 173.0 / 255.0, 10.0 / 255.0} as vec3;
        const smoke_color = {64.0 / 255.0, 64.0 / 255.0, 64.0 / 255.0} as vec3;
        vec4 color = make_vec(lerp(p.life_time, smoke_color, fire_color), p.life_time);
        Transform2D tr = {p.pos, p.rot, 1.0 / 16.0};
        draw_texture(tr, 0, p.tex, color);

        if p.life_time < 0  list_unordered_remove(particles, it as uint32); // TODO: fix this remove in iterator
    }
}
