
const ItemKind_Count = 2;
enum ItemKind {
    Rock; IronOre;
}

struct Item {
    ItemKind kind;
    uint32 stack_count;
}

struct Cargo {
    uint32 amount;
    Item[ItemKind_Count] items;
}

uint32 cargo_amount(Entity* en) return en.cargo ? en.cargo.amount : 0;

void pickup(Entity* en, drop) {
    if en.cargo == null {
        en.cargo = alloc Cargo;
        @en.cargo = {};
    }

    int32 cap_left = en.cargo_capacity as int32 - en.cargo.amount as int32;
    if cap_left <= 0 return;
    uint32 amount = min(cap_left, drop.item.stack_count);

    drop.item.stack_count -= amount;
    en.cargo.items[drop.item.kind].stack_count += amount;
    en.cargo.amount += amount;

    if drop.item.stack_count == 0  kill_entity(drop);

    if en == player and amount   this_frame.player_pickup_item = true;
}

void drop_cargo(Entity* en, float32 cooldown) {
    if en.cargo == null  return;

    for 0 .. ItemKind_Count {
        let item = en.cargo.items[it];

        for 0 .. item.stack_count {
            let drop = spawn_item(en.tr.pos, item.kind, 1);
            drop.vel = drop.vel + en.vel + random_vec2(50);
            drop.ang_vel = random(global_seed++) * Pi;
            drop.cooldown = cooldown;
        }
    }

    free(en.cargo);
    en.cargo = null;
}

void draw_inventory() {

}
