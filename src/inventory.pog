
const ItemKind_Count = 2;
enum ItemKind {
    IronOre; GoldOre;
}

struct Item {
    ItemKind kind;
    uint32 stack_count;
}

struct Cargo {
    uint32 amount;
    uint32[ItemKind_Count] item_count;
}

uint32[ItemKind_Count] item_price = {
    1, 5
};

uint32 cargo_amount(Entity* en) return en.cargo ? en.cargo.amount : 0;

uint32 add_item(Entity* en, Item item) {
    if en.cargo == null {
        en.cargo = alloc Cargo;
        @en.cargo = {};
    }

    int32 cap_left = en.cargo_capacity as int32 - en.cargo.amount as int32;
    if cap_left <= 0 return 0;
    uint32 amount = min(cap_left, item.stack_count);

    en.cargo.item_count[item.kind] += amount;
    en.cargo.amount += amount;
    return amount;
}

void pickup(Entity* en, drop) {
    uint32 amount = add_item(en, drop.item);
    drop.item.stack_count -= amount;
    if drop.item.stack_count == 0  despawn(drop);

    if en == player and amount   this_frame.player_pickup_item = true;

    if amount audio_play(*wav_hallo, make_vec(drop.tr.pos, -drop.depth));

    if en.entity_type == EntityType.station
    and drop.target and drop.target.team_id == team_id_player {
        uint32 credits = amount * item_price[drop.item.kind];
        add_credits(credits);
    }
}

void drop_cargo(Entity* en, float32 cooldown) {
    if en.cargo == null  return;

    uint32 amount_dropped = 0;

    for 0 .. ItemKind_Count {
        let stack_count = en.cargo.item_count[it];
        ItemKind kind = it as ItemKind;

        for 0 .. stack_count {
            let drop = spawn_item(en.tr.pos, kind, 1);
            drop.vel = drop.vel + en.vel + random_vec2(50);
            drop.ang_vel = random(global_seed++) * Pi;
            drop.cooldown = cooldown;
            drop.target = en;
        }

        amount_dropped += stack_count;
    }

    if amount_dropped audio_play(*wav_hallo, make_vec(en.tr.pos, -en.depth));

    free(en.cargo);
    en.cargo = null;
}

void draw_inventory() {

}
